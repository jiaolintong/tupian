1、javascript组成：
	1、ECMAScript   欧洲计算机制造商协会  规范js语法
	2、BOM
	3、DOM
2、javascript 代码实现 内部脚本和链接
	1、js的代码必须出现在script的标签内部 嵌入到网页中
	2、script 标签位置任意  除了title中。
	3、script标签的src属性  连接外部的js文件
	4、type属性用于确定是否是js代码 type="text/javascript"
	5、带有src属性的script标签内部js代码无效
3、JavaScript的几个输出语句：
	1、alert（） 弹出一个警告框  阻塞其他代码执行 用于调试
	2、document.write()    .前面的叫 对象  .后面的有括号的叫 方法  没有括号的叫 属性
	3、console.log()  在控制台打印输出
	4、function fn()
4、js中的字面量（常量） 规定不变的量：
	数值型常量
	        整数
		十六进制：0-9  a-f  以 0x开
	字符型常量
	        用引号 括起来的字符   ""     '' 
	        注意引号嵌套：   "  '   '    "或者  '   ""    '
	布尔型常量
	      true和false
5、js中表识符的命名规范
	1、由字母或 数字或下划线或$组成
	2、不能用数字
	3、不能用系统指定的关键字
	4、驼峰式命名：
		大驼峰：QianFengJiaoYu
		小驼峰：qianFengJiaoYu
	5、匈牙利命名法：
		int  float  string  char  object
		iNum 整数   以i 开头 表示整数
		fNum 小数  以f 开头 表示小数
6、变量的定义和赋值
	使用var定义变量
7、js中输出结果时注意几点：
	1、输出字符串    必须加引号 alert（"hello"）
	2、输出变量的值 一定不能加引号 alert（age）
	3、当输出变量和字符串时，需要使用+拼接
8、变量的数据类型:
	1、基本数据类型 ：字符型string；数值型number；布尔型boolean:true false
	2、复合数据类型：对象 object
	3、特殊数据类型：null空   undefined 未定义
9、（扩展） 测试变量的数据类型
	typeof 
		用法：typeof  变量名  typeof(变量名)
	typeof的返回值有哪些？
		number  boolean  string  object  undefined  function
	typeof typeof 数据 --->　string
10、运算符和表达式 
	什么是表达式：一个字面量或一个变量或通过运算符连接的式子
			23  iNum  5+8
	什么是运算符：进行运算的符号
 	运算符有哪些   :每一个运算符对应的表达式的值
11、++i 和 i++ 的异同：
	 相同：变量i的结果都会自增1
	 不同：表达式的结果不同		++i（先自增，后赋值）i++（先赋值，后自增）
12、	一、运算符：>  >=  <  <=   ==等于   ===全等于   ！=不等于   ！==全不等
	二、表达式的值 ： true  false
          如果关系表达式成立，结果为 true  否则为false
 	1、如果运算符两侧都是数值型 ?正常比较
 	2、如果运算符两侧都是字符型 ?正常比较 （通过键盘按键的ASCII码值进行比较的 ?0--48 ? ?a--97 ? ? A--65）
 	3、如果运算符两侧有一侧是纯数字字符串 自动转换后正常比较
	4、如果运算符两侧有一侧是非数字字符串 不能正常比较 ，结果是false
	三、 ==  和 === 的区别：
		== 等于  只比较结果值，不比较类型  100 == “100” true  100!="100" false
		=== 全等  先比较类型 ?在比较结果值  100 === “100”  false 100 !== "100" true
13、逻辑运算符：&&  ||   ！
14、 条件运算符  三目 ?： 
	一、运算符 ?：
	二、表达式的值
		表达式1  ?表达式2 :　表达式3
		如果表达式1的结果为真 ， 整个条件表达式的值 为表达式2的值
		如果表达式1的结果为假，  整个条件表达式的值 为表达式3的值
15、短路问题：
	1、当true遇到  ||  时，前为真，后不执行；
		var a=5; 3<4 || a++; alert(a=5) ;
	2、当false遇到 && 时，后不执行；
		var a=5; 3>4 && ++a; alert(a=5);
16、运算符的优先级：（）单目++ -- ！ 算数   关系  逻辑  条件  赋值
	赋值运算符是所有运算符中最低的
	变量=表达式  将表达式是值赋值给变量

17、类型转换
	1、自动转换：
		在进行算术运算或关系运算，纯数字字符会自动转成数值
		在进行算术运算时，null会自动转换成0，undefined会转换成NaN
			1+ null =1;   1+undefined = NaN;  "a"> undefined     false
	2、强制转换类型：强制将某个类型转换成另一类型，如果不能正常转换，结果就是NaN;
	        	parseInt()  将字符串转成整数
			parseInt（"12"） --   12
			parseInt（"12ab"） --   12
			parseInt（"as12sda"） --   NaN
			parseInt（"as12"） --   NaN
			parseInt（"12s23"） --   12
		parseFloat()   将字符串转成小数
			parseFloat（"12.34asd324"）;--   12.34
			parseFloat（"12ad12.34"）;--   12
		Number()   尝试将某个类型转成数值型 如果不能转换，值为NaN
			Number( true )   1
			Number( false )   0
			Number( "12")    122
			Number( "12ab");  NaN
			Number( "12ad34" )  NaN
		toString()  尝试将某个类型转成字符串
18、isNaN(） 判断非数字  如果参数是非数字，结果是true  否则是false
		isNaN( "12" )    false
		isNaN( 12)    false
		isNaN( "12ab" )  true
		isNaN( "av" )  true
	eval()  将一个字符串转成表达式， 并返回表达式的值（将引号去掉）
		alert（"2+3"）;
		alert( eval( "2+3" ));
		eval( "alert( 2 )" );
19、程序的编程规范：
	1、每条语句结束后  可以使用分号 或 回车符   建议使用分号
	2、每条语句 独占一行
	3、被嵌套的代码  必须有缩进
	4、所有的标点符号都是英文 
	5、代码严格区分大小写
20、循环：反复执行某段代码
	控制语句：while   do....while  for   for...in
	循环五要素：
		1、循环变量   2、循环变量初始值
		3、循环变量终值（循环条件）
		4、循环变量增值（步长）
		5、循环体
			



 function fnFac( m ){
    var fac=1;
    for(var i=1;i<=m;i++){
        fac*=i;
    }
    return fac;//返回阶乘值
fnFac(2)//2的阶乘；
fnSquare//平方










































